From 33fe7d37474b091b9257b59c7662ca51833f92c3 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Fri, 21 Jun 2019 18:02:17 +0800
Subject: [PATCH 3/9] HACK: drm/rockchip: vop: support colorkey prop for
 rk3399/rk3288

Change-Id: I3509c4999101340bf698c5226c2dc4d47ba7b1f3
Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 drivers/gpu/drm/rockchip/rockchip_drm_vop.c | 32 +++++++++++++++++++++
 drivers/gpu/drm/rockchip/rockchip_vop_reg.c | 14 ++++++---
 2 files changed, 42 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop.c b/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
index 66fa825b80cd..a13914a5a0b0 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop.c
@@ -181,6 +181,7 @@ struct vop_plane_state {
 	int blend_mode;
 	unsigned long offset;
 	int pdaf_data_type;
+	unsigned int colorkey;
 };
 
 struct rockchip_mcu_timing {
@@ -209,6 +210,7 @@ struct vop_win {
 	struct vop *vop;
 
 	struct drm_property *rotation_prop;
+	struct drm_property *colorkey_prop;
 	struct vop_plane_state state;
 };
 
@@ -1696,6 +1698,7 @@ static void vop_plane_atomic_update(struct drm_plane *plane,
 	int ymirror, xmirror;
 	uint32_t val;
 	bool rb_swap, global_alpha_en;
+	int colorkey;
 
 #if defined(CONFIG_ROCKCHIP_DRM_DEBUG)
 	bool AFBC_flag = false;
@@ -1839,6 +1842,14 @@ static void vop_plane_atomic_update(struct drm_plane *plane,
 		VOP_WIN_SET_EXT(vop, win, csc, r2y_en, vop_plane_state->r2y_en);
 		VOP_WIN_SET_EXT(vop, win, csc, csc_mode, vop_plane_state->csc_mode);
 	}
+
+	colorkey = vop_plane_state->colorkey;
+	colorkey = ((colorkey & 0xFF0000) << 6) |
+		((colorkey & 0xFF00) << 4) |
+		((colorkey & 0xFF) << 2);
+	VOP_WIN_SET(vop, win, key_color, colorkey);
+	VOP_WIN_SET(vop, win, key_en, !!(colorkey & (1UL << 31)));
+
 	VOP_WIN_SET(vop, win, enable, 1);
 	VOP_WIN_SET(vop, win, gate, 1);
 	spin_unlock(&vop->reg_lock);
@@ -1984,6 +1995,11 @@ static int vop_atomic_plane_set_property(struct drm_plane *plane,
 		return 0;
 	}
 
+	if (property == win->colorkey_prop) {
+		plane_state->colorkey = val;
+		return 0;
+	}
+
 	DRM_ERROR("failed to set vop plane property\n");
 	return -EINVAL;
 }
@@ -2032,6 +2048,11 @@ static int vop_atomic_plane_get_property(struct drm_plane *plane,
 		return 0;
 	}
 
+	if (property == win->colorkey_prop) {
+		*val = plane_state->colorkey;
+		return 0;
+	}
+
 	DRM_ERROR("failed to get vop plane property\n");
 	return -EINVAL;
 }
@@ -4126,6 +4147,17 @@ static int vop_plane_init(struct vop *vop, struct vop_win *win,
 		drm_object_attach_property(&win->base.base,
 					   private->pdaf_data_type, 0x2a);
 
+	if (VOP_WIN_SUPPORT(vop, win, key_color)) {
+		prop = drm_property_create_signed_range(vop->drm_dev, 0,
+							"colorkey",
+							-1, 0xffffffff);
+		if (!prop)
+			return -ENOMEM;
+		win->colorkey_prop = prop;
+		drm_object_attach_property(&win->base.base,
+					   win->colorkey_prop, -1);
+	}
+
 	return 0;
 }
 
diff --git a/drivers/gpu/drm/rockchip/rockchip_vop_reg.c b/drivers/gpu/drm/rockchip/rockchip_vop_reg.c
index 9309908a9e73..5a5cb4d8ba88 100644
--- a/drivers/gpu/drm/rockchip/rockchip_vop_reg.c
+++ b/drivers/gpu/drm/rockchip/rockchip_vop_reg.c
@@ -132,6 +132,8 @@ static const struct vop_win_phy rk3288_win01_data = {
 	.global_alpha_val = VOP_REG(RK3288_WIN0_SRC_ALPHA_CTRL, 0xff, 16),
 	.dst_alpha_ctl = VOP_REG(RK3288_WIN0_DST_ALPHA_CTRL, 0xffffffff, 0),
 	.channel = VOP_REG_VER(RK3288_WIN0_CTRL2, 0xff, 0, 3, 8, 8),
+	.key_color = VOP_REG(RK3288_WIN0_COLOR_KEY, 0x3fffffff, 0),
+	.key_en = VOP_REG(RK3288_WIN0_COLOR_KEY, 0x1, 31),
 };
 
 static const struct vop_win_phy rk3288_win23_data = {
@@ -148,6 +150,8 @@ static const struct vop_win_phy rk3288_win23_data = {
 	.src_alpha_ctl = VOP_REG(RK3288_WIN2_SRC_ALPHA_CTRL, 0xffff, 0),
 	.global_alpha_val = VOP_REG(RK3288_WIN2_SRC_ALPHA_CTRL, 0xff, 16),
 	.dst_alpha_ctl = VOP_REG(RK3288_WIN2_DST_ALPHA_CTRL, 0xffffffff, 0),
+	.key_color = VOP_REG(RK3288_WIN2_COLOR_KEY, 0xffffff, 0),
+	.key_en = VOP_REG(RK3288_WIN2_COLOR_KEY, 0x1, 24),
 };
 
 static const struct vop_win_phy rk3288_area1_data = {
@@ -419,6 +423,8 @@ static const struct vop_win_phy rk3368_win23_data = {
 	.src_alpha_ctl = VOP_REG(RK3368_WIN2_SRC_ALPHA_CTRL, 0xffff, 0),
 	.global_alpha_val = VOP_REG(RK3368_WIN2_SRC_ALPHA_CTRL, 0xff, 16),
 	.dst_alpha_ctl = VOP_REG(RK3368_WIN2_DST_ALPHA_CTRL, 0xffffffff, 0),
+	.key_color = VOP_REG(RK3366_WIN2_COLOR_KEY, 0x3fffffff, 0),
+	.key_en = VOP_REG(RK3366_WIN2_COLOR_KEY, 0x1, 31),
 };
 
 static const struct vop_win_phy rk3368_area1_data = {
@@ -1330,8 +1336,8 @@ static const struct vop_win_phy rk3366_lit_win0_data = {
 	.alpha_mode = VOP_REG(RK3366_LIT_WIN0_ALPHA_CTRL, 0x1, 1),
 	.alpha_en = VOP_REG(RK3366_LIT_WIN0_ALPHA_CTRL, 0x1, 0),
 	.global_alpha_val = VOP_REG(RK3366_LIT_WIN0_ALPHA_CTRL, 0xff, 4),
-	.key_color = VOP_REG(RK3366_LIT_WIN0_COLOR_KEY, 0xffffff, 0),
-	.key_en = VOP_REG(RK3366_LIT_WIN0_COLOR_KEY, 0x1, 24),
+	.key_color = VOP_REG(RK3366_LIT_WIN0_COLOR_KEY, 0x3fffffff, 0),
+	.key_en = VOP_REG(RK3366_LIT_WIN0_COLOR_KEY, 0x1, 31),
 };
 
 static const struct vop_win_phy rk3366_lit_win1_data = {
@@ -1350,8 +1356,8 @@ static const struct vop_win_phy rk3366_lit_win1_data = {
 	.alpha_mode = VOP_REG(RK3366_LIT_WIN1_ALPHA_CTRL, 0x1, 1),
 	.alpha_en = VOP_REG(RK3366_LIT_WIN1_ALPHA_CTRL, 0x1, 0),
 	.global_alpha_val = VOP_REG(RK3366_LIT_WIN1_ALPHA_CTRL, 0xff, 4),
-	.key_color = VOP_REG(RK3366_LIT_WIN1_COLOR_KEY, 0xffffff, 0),
-	.key_en = VOP_REG(RK3366_LIT_WIN1_COLOR_KEY, 0x1, 24),
+	.key_color = VOP_REG(RK3366_LIT_WIN1_COLOR_KEY, 0x3fffffff, 0),
+	.key_en = VOP_REG(RK3366_LIT_WIN1_COLOR_KEY, 0x1, 31),
 };
 
 static const struct vop_win_data rk3366_vop_lit_win_data[] = {
-- 
2.20.1

